import os
import g4f
from telethon import TelegramClient, events
import logging

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram.
# api_id –∏ api_hash –≤—ã–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ https://my.telegram.org.
# –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å Telegram API.

api_id = '' # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Application ID)
api_hash = '' # –•—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Application Hash)
phone_number = 'YOUR_PHONE_NUMBER' 
session_name = 'session_name'
my_user_id =   # –ó–¥–µ—Å—å —É–∫–∞–∂–∏ —Å–≤–æ–π User ID 
logging.basicConfig(level=logging.INFO)

if os.path.exists(f'{session_name}.session'):
    os.remove(f'{session_name}.session')
    logging.info("–°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.")

client = TelegramClient(session_name, api_id, api_hash)

@client.on(events.NewMessage())
async def ai_response(event):
    if event.sender_id != my_user_id:
        return 

    user_message = event.message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

    if user_message.startswith("/"):
        question = user_message[1:].strip() 
        if not question:
            await event.reply("‚ùå –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ '/'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
            return
        
        try:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-4 —Å –≤–æ–ø—Ä–æ—Å–æ–º: {question}")
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": question}],
            )
            
            if isinstance(response, str):
                await event.reply(f"üí≠–û—Ç–≤–µ—Ç –æ—Ç –ò–ò: {response}") 
            elif isinstance(response, dict) and 'choices' in response:
                await event.reply(f"–û—Ç–≤–µ—Ç –æ—Ç –ò–ò: {response['choices'][0]['message']['content']}") 
            else:
                await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
            await event.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        return

try:
    with client:
        client.start(phone_number)
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        client.run_until_disconnected()
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")